// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/SorataBaka/gin-template/domain"
	mock "github.com/stretchr/testify/mock"
)

// RegisterUsecase is an autogenerated mock type for the RegisterUsecase type
type RegisterUsecase struct {
	mock.Mock
}

type RegisterUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *RegisterUsecase) EXPECT() *RegisterUsecase_Expecter {
	return &RegisterUsecase_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ginContext, newUser
func (_m *RegisterUsecase) CreateUser(ginContext context.Context, newUser *domain.User) error {
	ret := _m.Called(ginContext, newUser)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) error); ok {
		r0 = rf(ginContext, newUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterUsecase_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type RegisterUsecase_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ginContext context.Context
//   - newUser *domain.User
func (_e *RegisterUsecase_Expecter) CreateUser(ginContext interface{}, newUser interface{}) *RegisterUsecase_CreateUser_Call {
	return &RegisterUsecase_CreateUser_Call{Call: _e.mock.On("CreateUser", ginContext, newUser)}
}

func (_c *RegisterUsecase_CreateUser_Call) Run(run func(ginContext context.Context, newUser *domain.User)) *RegisterUsecase_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.User))
	})
	return _c
}

func (_c *RegisterUsecase_CreateUser_Call) Return(_a0 error) *RegisterUsecase_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RegisterUsecase_CreateUser_Call) RunAndReturn(run func(context.Context, *domain.User) error) *RegisterUsecase_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ginContext, email
func (_m *RegisterUsecase) GetUserByEmail(ginContext context.Context, email string) (*domain.User, error) {
	ret := _m.Called(ginContext, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return rf(ginContext, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(ginContext, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ginContext, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUsecase_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type RegisterUsecase_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ginContext context.Context
//   - email string
func (_e *RegisterUsecase_Expecter) GetUserByEmail(ginContext interface{}, email interface{}) *RegisterUsecase_GetUserByEmail_Call {
	return &RegisterUsecase_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ginContext, email)}
}

func (_c *RegisterUsecase_GetUserByEmail_Call) Run(run func(ginContext context.Context, email string)) *RegisterUsecase_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RegisterUsecase_GetUserByEmail_Call) Return(_a0 *domain.User, _a1 error) *RegisterUsecase_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RegisterUsecase_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (*domain.User, error)) *RegisterUsecase_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewRegisterUsecase creates a new instance of RegisterUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRegisterUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *RegisterUsecase {
	mock := &RegisterUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
