// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "github.com/SorataBaka/gin-template/domain"
	mock "github.com/stretchr/testify/mock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

type UserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepository) EXPECT() *UserRepository_Expecter {
	return &UserRepository_Expecter{mock: &_m.Mock}
}

// ChangePassword provides a mock function with given fields: _a0, id, newPassword
func (_m *UserRepository) ChangePassword(_a0 context.Context, id string, newPassword string) (*domain.User, error) {
	ret := _m.Called(_a0, id, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for ChangePassword")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*domain.User, error)); ok {
		return rf(_a0, id, newPassword)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.User); ok {
		r0 = rf(_a0, id, newPassword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, id, newPassword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_ChangePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangePassword'
type UserRepository_ChangePassword_Call struct {
	*mock.Call
}

// ChangePassword is a helper method to define mock.On call
//   - _a0 context.Context
//   - id string
//   - newPassword string
func (_e *UserRepository_Expecter) ChangePassword(_a0 interface{}, id interface{}, newPassword interface{}) *UserRepository_ChangePassword_Call {
	return &UserRepository_ChangePassword_Call{Call: _e.mock.On("ChangePassword", _a0, id, newPassword)}
}

func (_c *UserRepository_ChangePassword_Call) Run(run func(_a0 context.Context, id string, newPassword string)) *UserRepository_ChangePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserRepository_ChangePassword_Call) Return(_a0 *domain.User, _a1 error) *UserRepository_ChangePassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_ChangePassword_Call) RunAndReturn(run func(context.Context, string, string) (*domain.User, error)) *UserRepository_ChangePassword_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: _a0, user
func (_m *UserRepository) CreateUser(_a0 context.Context, user *domain.User) error {
	ret := _m.Called(_a0, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) error); ok {
		r0 = rf(_a0, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - _a0 context.Context
//   - user *domain.User
func (_e *UserRepository_Expecter) CreateUser(_a0 interface{}, user interface{}) *UserRepository_CreateUser_Call {
	return &UserRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", _a0, user)}
}

func (_c *UserRepository_CreateUser_Call) Run(run func(_a0 context.Context, user *domain.User)) *UserRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.User))
	})
	return _c
}

func (_c *UserRepository_CreateUser_Call) Return(_a0 error) *UserRepository_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_CreateUser_Call) RunAndReturn(run func(context.Context, *domain.User) error) *UserRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserByEmail provides a mock function with given fields: _a0, email
func (_m *UserRepository) DeleteUserByEmail(_a0 context.Context, email string) (*domain.User, error) {
	ret := _m.Called(_a0, email)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserByEmail")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return rf(_a0, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(_a0, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_DeleteUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserByEmail'
type UserRepository_DeleteUserByEmail_Call struct {
	*mock.Call
}

// DeleteUserByEmail is a helper method to define mock.On call
//   - _a0 context.Context
//   - email string
func (_e *UserRepository_Expecter) DeleteUserByEmail(_a0 interface{}, email interface{}) *UserRepository_DeleteUserByEmail_Call {
	return &UserRepository_DeleteUserByEmail_Call{Call: _e.mock.On("DeleteUserByEmail", _a0, email)}
}

func (_c *UserRepository_DeleteUserByEmail_Call) Run(run func(_a0 context.Context, email string)) *UserRepository_DeleteUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepository_DeleteUserByEmail_Call) Return(_a0 *domain.User, _a1 error) *UserRepository_DeleteUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_DeleteUserByEmail_Call) RunAndReturn(run func(context.Context, string) (*domain.User, error)) *UserRepository_DeleteUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserById provides a mock function with given fields: _a0, ID
func (_m *UserRepository) DeleteUserById(_a0 context.Context, ID string) (*domain.User, error) {
	ret := _m.Called(_a0, ID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserById")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return rf(_a0, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(_a0, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_DeleteUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserById'
type UserRepository_DeleteUserById_Call struct {
	*mock.Call
}

// DeleteUserById is a helper method to define mock.On call
//   - _a0 context.Context
//   - ID string
func (_e *UserRepository_Expecter) DeleteUserById(_a0 interface{}, ID interface{}) *UserRepository_DeleteUserById_Call {
	return &UserRepository_DeleteUserById_Call{Call: _e.mock.On("DeleteUserById", _a0, ID)}
}

func (_c *UserRepository_DeleteUserById_Call) Run(run func(_a0 context.Context, ID string)) *UserRepository_DeleteUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepository_DeleteUserById_Call) Return(_a0 *domain.User, _a1 error) *UserRepository_DeleteUserById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_DeleteUserById_Call) RunAndReturn(run func(context.Context, string) (*domain.User, error)) *UserRepository_DeleteUserById_Call {
	_c.Call.Return(run)
	return _c
}

// FetchUsers provides a mock function with given fields: _a0, filter
func (_m *UserRepository) FetchUsers(_a0 context.Context, filter primitive.M) (*[]domain.User, error) {
	ret := _m.Called(_a0, filter)

	if len(ret) == 0 {
		panic("no return value specified for FetchUsers")
	}

	var r0 *[]domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.M) (*[]domain.User, error)); ok {
		return rf(_a0, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.M) *[]domain.User); ok {
		r0 = rf(_a0, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.M) error); ok {
		r1 = rf(_a0, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_FetchUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchUsers'
type UserRepository_FetchUsers_Call struct {
	*mock.Call
}

// FetchUsers is a helper method to define mock.On call
//   - _a0 context.Context
//   - filter primitive.M
func (_e *UserRepository_Expecter) FetchUsers(_a0 interface{}, filter interface{}) *UserRepository_FetchUsers_Call {
	return &UserRepository_FetchUsers_Call{Call: _e.mock.On("FetchUsers", _a0, filter)}
}

func (_c *UserRepository_FetchUsers_Call) Run(run func(_a0 context.Context, filter primitive.M)) *UserRepository_FetchUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(primitive.M))
	})
	return _c
}

func (_c *UserRepository_FetchUsers_Call) Return(_a0 *[]domain.User, _a1 error) *UserRepository_FetchUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_FetchUsers_Call) RunAndReturn(run func(context.Context, primitive.M) (*[]domain.User, error)) *UserRepository_FetchUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: _a0, email
func (_m *UserRepository) GetUserByEmail(_a0 context.Context, email string) (*domain.User, error) {
	ret := _m.Called(_a0, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return rf(_a0, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(_a0, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type UserRepository_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - _a0 context.Context
//   - email string
func (_e *UserRepository_Expecter) GetUserByEmail(_a0 interface{}, email interface{}) *UserRepository_GetUserByEmail_Call {
	return &UserRepository_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", _a0, email)}
}

func (_c *UserRepository_GetUserByEmail_Call) Run(run func(_a0 context.Context, email string)) *UserRepository_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepository_GetUserByEmail_Call) Return(_a0 *domain.User, _a1 error) *UserRepository_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (*domain.User, error)) *UserRepository_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserById provides a mock function with given fields: _a0, id
func (_m *UserRepository) GetUserById(_a0 context.Context, id string) (*domain.User, error) {
	ret := _m.Called(_a0, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return rf(_a0, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(_a0, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserById'
type UserRepository_GetUserById_Call struct {
	*mock.Call
}

// GetUserById is a helper method to define mock.On call
//   - _a0 context.Context
//   - id string
func (_e *UserRepository_Expecter) GetUserById(_a0 interface{}, id interface{}) *UserRepository_GetUserById_Call {
	return &UserRepository_GetUserById_Call{Call: _e.mock.On("GetUserById", _a0, id)}
}

func (_c *UserRepository_GetUserById_Call) Run(run func(_a0 context.Context, id string)) *UserRepository_GetUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepository_GetUserById_Call) Return(_a0 *domain.User, _a1 error) *UserRepository_GetUserById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_GetUserById_Call) RunAndReturn(run func(context.Context, string) (*domain.User, error)) *UserRepository_GetUserById_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
